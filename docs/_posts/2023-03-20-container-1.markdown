---
layout: posts
title:  "Container - 1"
author: Minjong Ha
published: false
date:   2023-03-20 12:00:00 +0900
---

Container is a software technology that packaging an application and its dependencies into a single unit.
It supports every components to run an application: code, libraries, system tools and etc.
However, it still isolated from host system and other containers.
Isolation provides improved security, resource utilization, and running multiple instances.

There are popular container technologies: Docker, Kubernetes, and Linux Containers (LXC).

## Docker

Docker is a container platform without any additional cofiguration.
It is easy to deploy and scale applications across different environments.

## Kubernetes

Kubernetes is an open-source container supporting system that automates deployment, scaling and managegemt of contained applications.
It supports cluster of machines and ensures that containered application scalable and resilient to failures.
Kubernetes uses docker as the default container during the runtime.

## Linux Container (LXC)

LXC is a lightweight virtualization technology that allowing to create multiple isolated environments on a single Linux host.
LXC can run multiple applications on the same host without virtual machines.
LXC container share the same kernel as the host operating system and it makes LXC efficient.

## Differences?

* Containerization Technology:

Docker and LXC are both containerization technologies that allow you to run isolated applications on a single host, whereas Kubernetes is a container orchestration system that automates the deployment and management of containerized applications across a cluster of machines.

* Image and Container Management:

Docker provides a simple way to create, distribute, and run containerized applications using Docker images, which are portable snapshots of a container and its dependencies. Docker also provides a command-line interface and a registry (Docker Hub) for managing images and containers.

LXC, on the other hand, is a lower-level technology that provides a lightweight way to create and manage Linux containers directly on a host machine. It does not provide a registry or a command-line interface for managing images and containers.

Kubernetes builds on top of Docker (or other container runtimes) and provides a platform for managing containerized applications at scale. It includes features for deploying and scaling applications, managing networking and storage, and monitoring and logging.

* Resource Management:

Docker and LXC both provide a way to allocate resources to containers, such as CPU, memory, and disk space, but they do not provide advanced scheduling or load balancing features.
Kubernetes, on the other hand, includes a sophisticated scheduler that can automatically allocate containers to nodes based on resource availability and other factors. It also includes features for scaling containers up or down based on demand, and for load balancing traffic between containers.

In addition, Kubernetes provides a powerful API that can be used to programmatically manage containers and other resources, making it easy to integrate with other tools and automate container management tasks. This API allows you to define and manage containerized applications as a set of declarative configurations, which can be version controlled and easily shared with other users.

* Scalability and High Availability:

Docker is primarily designed for running containers on a single host, although it can be used in conjunction with other tools to achieve higher levels of scalability and high availability. LXC is similar in that it is focused on running containers on a single host. Kubernetes, on the other hand, is designed for managing containerized applications across a cluster of machines, and provides features for scaling applications horizontally and ensuring high availability.

* Networking:

Docker and LXC both provide some basic networking features, such as the ability to assign IP addresses to containers and to expose container ports to the host machine. Kubernetes provides more advanced networking features, such as service discovery, load balancing, and network policies, which allow you to control traffic between containers and external networks.

* Security:

Docker and LXC both provide some security features, such as isolation of containers from the host system and the ability to restrict container access to resources on the host system. However, they do not provide advanced security features such as fine-grained access controls or encryption of data at rest or in transit.

Kubernetes provides more advanced security features, such as network policies, role-based access control (RBAC), and secrets management, which allow you to control access to your cluster and protect sensitive data.

* Community and Ecosystem:

Docker has a large and active community of users and contributors, and there are many third-party tools and services available that integrate with Docker. Kubernetes also has a large and active community, and there are many tools and services available that are specifically designed to work with Kubernetes, such as Helm for package management and Istio for service mesh.

LXC has a smaller community and ecosystem compared to Docker and Kubernetes, although it is still widely used in certain contexts, such as lightweight virtualization and system containerization.

## Let's practice

The most important to study something is doing actual practice.
In next post, I will install and deploy containers with multiple applications.
